# Allows forward reference linking so we can use type hints to classes that
# have NOT been created yet
from __future__ import annotations

from dataclasses import dataclass
from typing import List, Dict, Union, Optional


@dataclass
class MatchProperty:
    match: str
    datatype: str


@dataclass
class SubDeviceProperty:
    """
    A SubDeviceProperty is used to contain sub devices from a
    specific unit.
    """
    subdevices: List[str]

    def __init__(self, subdevlist: List[str]):
        if not isinstance(subdevlist, list):
            raise ValueError("subdevicelist requires list of sub-devices")

        for c in subdevlist:
            c = c.strip()
            if not isinstance(c, str):
                raise ValueError(f"subdevicelist has invalid string value in list {c}")
            if c[0].isnumeric():
                raise ValueError(f"subdevicelist cannot start with a number.")

        self.subdevices = [x for x in subdevlist]

    def __getitem__(self, item):
        return self.subdevices[item]

    def __iter__(self):
        return self.subdevices.__iter__()


@dataclass
class UnitProperty:
    """
    A UnitProperty has either a string reference or a List of
    strings as subdevices
    """
    unit: Union[str, SubDeviceProperty]
    units: List[str]

    def __init__(self, **kwargs):
        """
        Initialize the `UnitProperty` class with a concrete constructor instead
        of an autogenerated one that is what most of the other classes are using.

        Each argument in kwargs should have a `List[str]` type value.  The list will
        then be sent along to the Subdevice property.

        p = UnitProperty(rtu4=['sub1', 'sub2'], rtu5=['sub3', 'sub4'])
        print(p.rtu4[0])

        # prints sub1

        :param kwargs:
        """
        self.unit = {}
        self.units = []

        for k, v in kwargs.items():
            subd = SubDeviceProperty(v)
            setattr(self, k, subd)
            self.unit[k] = subd
            self.units.append(k)

    def __iter__(self):
        return self.units.__iter__()


@dataclass
class DeviceProperty:
    """
    A DeviceProperty contains the campus and building properties and
    a unit property.  The unit property is documented above.
    """
    campus: str
    building: str
    unit: UnitProperty

    def __post_init__(self):
        if isinstance(self.unit, dict):
            self.unit = UnitProperty(**self.unit)


@dataclass
class PointMapping:
    point_mapping: Dict[str, str]


@dataclass
class ArgumentsProperty:
    point_mapping: Dict[str, str]

    def __init__(self, **kwargs):
        self.point_mapping = {}
        for k, v in kwargs.items():
            self.point_mapping[k] = v


@dataclass
class ConversionMapProperty:
    conversion_map: Optional[List[MatchProperty]]

    def __init__(self, mappings: List[dict]):
        self.conversion_map = []
        for k in mappings:
            match = k.get("match")
            datatype = k.get("datatype")
            if match:
                match = match.strip()
            if not match:
                raise ValueError("match required in conversion mapping")
            if datatype:
                datatype = datatype.strip()
            if not datatype:
                raise ValueError("datatype required in conversion mapping")
            self.conversion_map.append(MatchProperty(**k))


@dataclass
class AnalysisConfig:
    """
    AnalsyisConfig is a validator and documentation tool for the different
    configurations for pnnl applications.  It uses Prodict which allows
    dictionaries to seamlessly be written and read from using dot notation
    and allows for input validation based upon requirements.

    volttron-pnnl-application repository.
    """

    """ The application signature (probably should be removed but not sure)"""
    application: str

    device: DeviceProperty
    analysis_name: str
    arguments: Optional[ArgumentsProperty] = None
    conversion_map: Optional[ConversionMapProperty] = None
    actuation_mode: str = "PASSIVE"

    def __post_init__(self):
        if isinstance(self.device, dict):
            self.device = DeviceProperty(**self.device)
        if self.actuation_mode is not None:
            self.actuation_mode = "PASSIVE"

        if isinstance(self.conversion_map, dict):
            self.conversion_map = ConversionMapProperty(**self.conversion_map)

    def validate(self):
        required_properties = [
            ("application", str),
            ("device", DeviceProperty),
            ("arguments", dict),
            ("conversion_map", list)
        ]

        errors = []
        # p = property, t = type
        # call will be isinstances(self, p, t)
        for p, t in required_properties:
            if not getattr(self, p):
                errors.append(f"Property '{p}' requires a value")
            elif not isinstance(getattr(self, p), t):
                errors.append(f"property '{p}' must be of type '{t}' was '{type(getattr(self, p))}")

        if getattr(self, "actuation_mode") not in ('PASSIVE', 'ACTIVE'):
            errors.append(f"property activatino_mode must be 'ACTIVE' or 'PASSIVE'")

        for v in ("campus", "building", "unit"):
            if not getattr(self.device, v):
                errors.append(f"property device.{v} not found")

        if errors:
            raise ValueError("\n".join(errors))

#
#
#
# class AnalysisConfig:
#     def __init__(self):
#         arguments_property = property("arguments", "A collection of dynamic parameters for data")
#         device_property = property("device", "Properties for the device this unit is going to be using")
#         unit_property = Nestedproperty("unit",
#                                        "Contains unit definition (can include subdevices)")
#         self.required_properties: List[Union[Property, NestedProperty]] = [
#             Property("application",
#                      "Application string that uniquely identifies this agent??"),
#             Property("analysis_name", "The name of the analysis that is being run"),
#             NestedProperty(arguments_property, "point_mapping",
#                            "A mapping of points used within the script to points on the message bus."),
#             Property("activation_mode",
#                      "PASSIVE or ACTIVE activation mode."),
#
#
#         ]
