auction.py:from .logging_setup import get_log_handle
auction.py:_log = get_log_handle()
auction.py:        #_log.debug("Market name: {} transition_from_active_to_negotiation".format(self.name))
auction.py:            _log.debug(f"{self.name}: transition_from_active_to_negotiation")
auction.py:            _log.debug(
auction.py:                _log.info(f"Before calling receive_transactive_signal: {missing_interval_names}, {downstream_agent.name}")
auction.py:            _log.info("Market name: {} while_in_market_lead Received all transactive signals from downstream agents".format(self.name))
auction.py:                _log.info("Market name: {} downstream_agent: NAME: {}".format(self.name,
auction.py:                _log.warning('Warning: There must exist one upstream neighbor agent in an auction.')
auction.py:            _log.warning('Warning: Assigning neighbor ' + unassigned_agents[x].name + ' the downstream direction')
auction.py:            _log.warning('Assigning neighbor ' + unassigned_agents[x].name + ' the downstream direction')
auction.py:            _log.warning('Warning: There should be precisely one upstream neighbor for an auction market')
auction.py:            _log.warning('There should be precisely one upstream neighbor for an auction market')
auction.py:                _log.debug("SN: while_in_delivery_lead() DOWNSTREAM_AGENT PUBLISH TOPIC: {}".format(
auction.py:                _log.debug("SN: while_in_delivery_lead() sending transactive signal to downstream agent: {}".format(
auction.py:        _log.debug(f"{self.name}: transition_from_inactive_to_active")
auction.py:        _log.debug(f"{self.name}: transition_from_negotiation_to_market_lead")
auction.py:        _log.debug(f"{self.name}: transition_from_market_lead_to_delivery_lead")
auction.py:        _log.debug(f"{self.name}: transition_from_delivery_lead_to_delivery")
auction.py:        _log.debug("transition_from_reconcile_to_expired")
bulk_supplier_dc.py:    utils.setup_logging()
bulk_supplier_dc.py:    _log = logging.getLogger(__name__)
bulk_supplier_dc.py:    from .logging_setup import setup_logging
bulk_supplier_dc.py:    _log = setup_logging()
bulk_supplier_dc.py:            _log.warning('You should not use neighbor object ' + self.name
bulk_supplier_dc.py:            '''_log.debug("UV: active_threshold: {}, demandRate: {}".format(active_threshold, self.demandRate))
bulk_supplier_dc.py:            _log.debug("UV: time interval: {}".format(time_interval.startTime))
bulk_supplier_dc.py:                _log.debug("UV: ({}, {}, {})".format(x.record, x.marginalPrice, x.power))
bulk_supplier_dc.py:            _log.warning('Maximum power must be positive in BulkSupplier_dc.m')
bulk_supplier_dc.py:            _log.warning('Returning without creating active vertices for ' + self.name)
bulk_supplier_dc.py:            _log.warning('Minimum power must be positive in "BulkSupplier_dc.m')
bulk_supplier_dc.py:            _log.warning('Returning without creating active vertices for ' + self.name)
bulk_supplier_dc.py:                _log.debug("bulk_supplier_dc: update_vertices: peak_demand_threshold: {}, scheduled_powers: {}".format(
bulk_supplier_dc.py:        #_log.debug("{} bulk_supplier dc model active vertices are: {}".format(self.name, av))
consensus_market.py:            _log.debug("Market balance iteration %i: (tpc: %f, tdc: %f, dg: %f)" %
consensus_market.py:                # _log.debug("{} market active vertices are: {}".format(self.name, av))
consensus_market.py:                        _log.error(err_msg)
consensus_market.py:                        _log.error("{} failed to find balance point. "
dummy_tcc_model.py:utils.setup_logging()
dummy_tcc_model.py:_log = logging.getLogger(__name__)
dummy_tcc_model.py:        _log.debug("TCC set_tcc_curves are: q: {}, p: {}, c: {}".format(self.quantities,
dummy_tcc_model.py:    #     _log.debug("TCC tcc_model schedule_power()")
dummy_tcc_model.py:    #         _log.debug("TCC tcc_model default_power: {}".format(value))
dummy_tcc_model.py:    #     _log.debug("TCC scheduledPowers are: {}".format(sp))
dummy_tcc_model.py:        _log.debug("Market Dummy TCC tcc_model schedule_power()")
dummy_tcc_model.py:            _log.debug("Market name: {} in Market state: {}..Starting building level mix market ".format(mkt.name,
dummy_tcc_model.py:                _log.debug("Market Dummy TCC tcc_model schedule_power(): {}".format(mkt.marketSeriesName))
dummy_tcc_model.py:                _log.debug("Market Dummy TCC tcc_model schedule_power(): {}".format(mkt.marketSeriesName))
dummy_tcc_model.py:                _log.debug("Building schedule_power Market name: {}, marginal time startTime: {}".format(mkt.name,
dummy_tcc_model.py:                _log.debug("Building schedule_power Market name: {}, marginal price: {}".format(mkt.name, p.value))
dummy_tcc_model.py:            _log.debug("Creating building demand curves")
dummy_tcc_model.py:            _log.debug("Setting scheduled power, quantities: {}, prices: {}, curves: {}".format(quantities,
dummy_tcc_model.py:            _log.debug("Building demand curves: {}, Market name: {} len:{}".format(demand_curves,
dummy_tcc_model.py:            _log.debug("Building demand curves. Market name: {}, hour: {}".format(mkt.name,
dummy_tcc_model.py:            _log.debug("Building demand curves. Market name: {}, q: {}, p: {}, dc_hour: {}".format(mkt.name,
dummy_tcc_model.py:        _log.debug("Market {} Dummy TCC tcc_model set_scheduled_power()".format(mkt.name))
dummy_tcc_model.py:            _log.debug("Market TCC tcc_model default_power: {}".format(value))
dummy_tcc_model.py:        _log.debug("Market {} TCC scheduledPowers are: {}".format(mkt.name,
dummy_tcc_model.py:            _log.debug("Market: {} At {}, Tcc market has {} intervals".format(mkt.name,
dummy_tcc_model.py:                    _log.debug("TCC model e: {}, i: {}".format(e, i))
dummy_tcc_model.py:        _log.debug("TCC active vertices are: {}".format(av))
helpers.py:utils.setup_logging()
helpers.py:_log = logging.getLogger(__name__)
helpers.py:    #     _log.debug("Market: {} production active vertices are: {}".format(market.name,
helpers.py:    #     _log.debug("production active vertices are: {}".format(av))
helpers.py:        # _log.debug('Active vertices: %s' % (str(obj.activeVertices)))
helpers.py:    _log.debug("TCC neighbor {} has q_avg {}, r0.power {}, s0.power {}, dq {}, dmp {}".format(
helpers.py:    _log.debug("TCC neighbor {} s is: {}".format(
helpers.py:    _log.debug("TCC neighbor {} r is: {}".format(
helpers.py:    _log.debug("TCC for {} are_different1 returns {}".format(calling_neighbor, is_diff))
helpers.py:        _log.debug("TCC neighbor {} has q_avg {}, m0.power {}, s0.power {}, dq {}".format(
helpers.py:        _log.debug("TCC neighbor {} s is: {}".format(
helpers.py:        _log.debug("TCC neighbor {} m is: {}".format(
helpers.py:        _log.debug("TCC neighbor {} s is: {}".format(
helpers.py:        _log.debug("TCC neighbor {} m is: {}".format(
helpers.py:    _log.debug("TCC for {} are_different2 returns {}".format(calling_neighbor, is_diff))
local_asset_model.py:utils.setup_logging()
local_asset_model.py:_log = logging.getLogger(__name__)
local_asset_model.py:        #    _log.debug("schedule_power Market {}, time interval: {}, power value: {} ".format(power.market.name,
local_asset_model.py:                #_log.debug("schedule_power Market {}, time interval: {}, iv is None".format(market.name,
local_asset_model.py:        # _log.debug("{} asset model scheduledPowers are: {}".format(self.name, sp))
local_asset_model.py:        #        _log.debug("{} asset model dual costs are: {}".format(self.name, dc))
local_asset_model.py:        # _log.debug("{} asset model production costs are: {}".format(self.name, pc))
local_asset_model.py:            _log.debug("update_vertices Market {}, time interval: {}, power value: {} ".format(power.market.name,
local_asset_model.py:        _log.debug("update_vertices Market: {}, scheduled powers: {}".format(market.name,
local_asset_model.py:        #_log.debug("{} asset model active vertices are: {}".format(self.name, av))
logging_setup.py:def get_log_handle():
logging_setup.py:        utils.setup_logging()
logging_setup.py:        _log = logging.getLogger(__name__)
logging_setup.py:        _log = setup_logging()
logging_setup.py:    return _log
logging_setup.py:def setup_logging(name, log_file=None, level=logging.DEBUG):
market.py:from .logging_setup import get_log_handle
market.py:# utils.setup_logging()
market.py:# _log = logging.getLogger(__name__)
market.py:_log = get_log_handle()
market.py:            _log.debug(
market.py:            _log.debug("Market method: {}, self.marketClearingTime: {}, self.deliveryLeadTime: {}, self.intervalsToClear: {}, self.intervalDuration: {}".format(
market.py:                _log.debug("Market nextMarketClearingTime: {}, future_clearing_time: {}".format(self.nextMarketClearingTime,
market.py:                _log.info("Market name: {}, self.marketState: {}".format(self.name, self.marketState))
market.py:                _log.debug("In Market name: {}, Market State: {}, Current time: {}, activation_start_time: {}".format(
market.py:                _log.debug(
market.py:                _log.debug(
market.py:                _log.debug("In Market name: {} In Market State: {}".format(self.name, self.marketState))
market.py:                _log.debug(
market.py:                _log.debug("In Market name: {}, Market State: {}, Current time: {}, marketClearingTime: {}".format(
market.py:                _log.debug(
market.py:                _log.debug(
market.py:                _log.debug(
market.py:                _log.debug(
market.py:                _log.debug(
market.py:                _log.debug("In Market name: {} In Market State: {}, current_time: {}, reconcile_start_time: {}".format(self.name,
market.py:                    _log.debug("In Market name: {} In Market State: {}, current_time: {}, reconcile_start_time: {}".format(
market.py:                _log.debug("In Market name: {} In Market State: {}".format(self.name, self.marketState))
market.py:                _log.debug("Expired. In Market name: {} In Market State: {}".format(self.name,
market.py:            _log.debug("while_in_reconcile: write price data into csv: {}".format(full_filename))
market.py:                        _log.warning('No load demand cases were found in {}'.format(time_intervals[i].name))
market.py:                        _log.warning('No supply power cases were found in {}'.format(time_intervals[i].name))
market.py:                        _log.warning(
market.py:                    _log.warning('No balance point was found in {}'.format(time_intervals[i].name))
market.py:                    _log.error(err_msg)
market.py:                    # _log.error("{} failed to find balance point. "
market.py:            _log.debug("Market balance iteration %i: (tpc: %f, tdc: %f, dg: %f)" %
market.py:                # _log.debug("{} market active vertices are: {}".format(self.name, av))
market.py:                        _log.error(err_msg)
market.py:                        _log.error("{} failed to find balance point. "
market.py:            #            _log.warning('Primal costs have not yet been calculated.')
market.py:            #            _log.warning('Missing primal costs for active time intervals.')
market.py:            #            _log.warning('Removing primal costs that are not among active time intervals.')
market.py:        _log.info("starting_times: {0}, last_starting_time: {1}".format(starting_times, last_starting_time))
market.py:        _log.info("After starting_times: {0}, ".format(starting_times))
market.py:        # _log.info("ACTIVE Time intervals {}".format(self.timeIntervals.startTime))
market.py:            _log.info("ACTIVE Time intervals {}".format(time_interval.startTime))
market.py:                            '''_log.debug("Market name: {}, start_time: {}: time_interval.startTime: {} end_time: {} Method 2".format(self.name,
market.py:                                # _log.debug("Market name: {}, check_marginal_price: {} found time between start and end")
market.py:                    # _log.debug("Market name: {}, check_marginal_price: Method 3".format(self.name))
market.py:                            '''_log.debug("Market name: {}, check_marginal_price: start_time: {}, time_interval.startTime: {} end_time: {}".format(self.name,
market.py:            # _log.debug("market name {} sum_vertices: 5 b".format(self.name))
market.py:        #        _log.debug("{} market netPowers are: {}".format(self.name, np))
neighbor_model.py:utils.setup_logging()
neighbor_model.py:_log = logging.getLogger(__name__)
neighbor_model.py:                _log.debug("Signal for time interval {} ({}). Enable send flag.".format(i, time_intervals[i].name))
neighbor_model.py:                _log.debug("TCC for {} are_different1 returned True? Check: rs={}, ss={}, "
neighbor_model.py:                _log.debug("TCC for {} are_different2 returned True? Check: ms={}, ss={}, "
neighbor_model.py:        _log.debug("TCC convergence flags for {} are {}".format(
neighbor_model.py:        _log.debug("TCC convergence flag for {} is {}.".format(self.name, self.converged))
neighbor_model.py:                    _log.warning('segment is horizontal')
neighbor_model.py:            # _log.debug("measurement: {} threshold: {}".format(d, self.demandThreshold))
neighbor_model.py:            #_log.debug("Meter: {} measurement: {} threshold: {}".format(mtr.name,
neighbor_model.py:        _log.debug("{} neighbor model dual costs are: {}".format(self.name, dc))
neighbor_model.py:        _log.debug("{} neighbor model production costs are: {}".format(self.name, pc))
neighbor_model.py:            _log.warning('At least one default vertex must be defined for neighbor model %s. '
neighbor_model.py:            #_log.debug("update_vertices: active_threshold: {}".format(active_threshold))
neighbor_model.py:            #_log.debug("update_vertices: time interval: {}".format(time_interval.startTime))
neighbor_model.py:            #    _log.debug("update_vertices: ({}, {}, {})".format(x.record, x.marginalPrice, x.power))
neighbor_model.py:            dc_logged = False
neighbor_model.py:                _log.warning('At least one default vertex must be defined for neighbor model %s. '
neighbor_model.py:                    #_log.debug("neighbor_model.py, update_vertices, scheduledPowers: {}".format([x.value for x in self.scheduledPowers]))
neighbor_model.py:                                _log.debug("power: {} - demand charge threshold: {} - predicted power peak: {}"
neighbor_model.py:                                _log.debug("prior power: {}".format(prior_power))
neighbor_model.py:                                _log.debug("received vertices: {}"
neighbor_model.py:                                _log.error("{} has power {} AND object ({}) maxPower {} and minPower {}"
neighbor_model.py:                        _log.debug("NO DEMAND CHARGE 1")
neighbor_model.py:        #_log.debug("{} neighbor model active vertices are: {}".format(self.name, av))
neighbor_model.py:            _log.warning(
neighbor_model.py:            _log.warning("No transactive records were found. No transactive signal can be sent to %s." % self.name)
neighbor_model.py:        #_log.debug("At {}, {} sends signal from {} on topic {} message {}"
neighbor_model.py:            _log.warning('Transactive signals are not expected to be received from non-transactive neighbors. '
neighbor_model.py:            _log.warning(f'{market.name} Received Transactive signal is None. {this_transactive_node.name}')
neighbor_model.py:        _log.debug("remove_demand_charges: powers: {}".format(powers))
neighbor_model.py:        _log.debug("remove_demand_charges: min power: {}, threshold: {}, max power: {}".format(minimum_power,
new_building_agent.py:utils.setup_logging()
new_building_agent.py:_log = logging.getLogger(__name__)
new_building_agent.py:utils.setup_logging()
new_building_agent.py:def setup_logging(name, log_file, level=logging.DEBUG):
new_building_agent.py:mixmarket_log = '/home/volttron/volttron/mixmarket'
new_building_agent.py:if not os.path.exists(mixmarket_log):
new_building_agent.py:    _log2 = setup_logging('mixmarket', mixmarket_log + '.log')
new_building_agent.py:    _log2 = setup_logging('mixmarket', mixmarket_log + temp + '.log')
new_building_agent.py:        verbose_logging = self.config.get('verbose_logging', True)
new_building_agent.py:        _log2.debug("Mixmarket for agent {}:".format(self.name))
new_building_agent.py:        _log.debug("At {}, {} receives new supply records: {}".format(Timer.get_cur_time(),
new_building_agent.py:        _log.debug("At {}, mixmarket state is {}, start_of_cycle {}".format(Timer.get_cur_time(),
new_building_agent.py:            _log.debug("At {}, start of cycle. "
new_building_agent.py:            _log.debug("{} did not start mixmarket because it's too late.".format(self.name))
new_building_agent.py:                _log.debug("prices are {}".format(self.prices))
new_building_agent.py:                    _log.debug("temps are {}".format(temps))
new_building_agent.py:        _log.debug("TNS market {} balanced successfully.".format(market.name))
new_building_agent.py:        _log.debug("Balanced curves: {}".format(balanced_curves))
new_building_agent.py:            _log.debug("Campus model not converged. Sending signal back to campus.")
new_building_agent.py:            _log.debug("{}: offer for {} as {} at {} - Curve: {} {}".format(self.agent_name,
new_building_agent.py:            _log.debug("{}: offer has {} - Message: {}".format(self.agent_name, success, message))
new_building_agent.py:        _log.debug("{}: received topic for power aggregation: {}".format(self.agent_name,
new_building_agent.py:        _log.debug("{}: updating power aggregation: {}".format(self.agent_name,
new_building_agent.py:        _log.debug("{}: wants reservation for {} as {} at {}".format(self.agent_name,
new_building_agent.py:            _log.debug("{}: at ts {} min of aggregate curve : {}".format(self.agent_name,
new_building_agent.py:            _log.debug("{}: at ts {} max of aggregate curve : {}".format(self.agent_name,
new_building_agent.py:            _log.debug("At {}: Report aggregate Market: {} buyer Curve: {}".format(Timer.get_cur_time(),
new_building_agent.py:        _log.debug("{}: cleared price ({}, {}) for {} as {} at {}".format(Timer.get_cur_time(),
new_building_agent.py:            _log.error("Quantity is None. Set it to 0. Details below.")
new_building_agent.py:            _log.debug("{}: ({}, {}) for {} as {} at {}".format(self.agent_name,
new_building_agent.py:        _log.debug("At {}, Quantity is {} and quantities are: {}".format(Timer.get_cur_time(),
new_building_agent.py:            _log.error("Quantity received from mixmarket is negative!!! {}".format(quantity))
new_building_agent.py:            _log.debug("Quantity: {}".format(self.quantities))
new_building_agent.py:                _log.error("One of quantity is greater than "
new_building_agent.py:                _log.error("Demand curves: {}".format(self.building_demand_curves))
new_building_agent.py:            _log2.debug("Data at time {}:".format(Timer.get_cur_time()))
new_building_agent.py:            _log2.debug("Market intervals: {}".format([x.name for x in self.markets[0].timeIntervals]))
new_building_agent.py:            _log2.debug("Quantities: {}".format(self.quantities))
new_building_agent.py:            _log2.debug("Prices: {}".format(self.prices))
new_building_agent.py:            _log2.debug("Curves: {}".format(curves_arr))
new_building_agent.py:        _log.debug("{}: error for {} as {} at {} - Message: {}".format(self.agent_name,
new_building_agent.py:        _log.exception('unhandled exception')
new_campus_agent.py:utils.setup_logging()
new_campus_agent.py:_log = logging.getLogger(__name__)
new_campus_agent.py:        _log.debug("At {}, {} receives new demand records: {}".format(Timer.get_cur_time(),
new_campus_agent.py:            _log.error("{}: There are {} building(s) with name {}."
new_campus_agent.py:            _log.error("Neighbors are: {}".format([x.name for x in self.neighbors]))
new_campus_agent.py:            _log.error("Message is: {}".format(message))
new_campus_agent.py:            _log.error("Check value of 'name' key in the config file for building {}.".format(building_name))
new_campus_agent.py:        _log.debug("At {}, {} receives new supply records: {}".format(Timer.get_cur_time(),
new_campus_agent.py:            _log.debug("TNS market {} balanced successfully.".format(market.name))
new_campus_agent.py:                    _log.debug("NeighborModel {} sent records.".format(n.model.name))
new_campus_agent.py:                            _log.debug("NeighborModel {} sent records.".format(n.model.name))
new_campus_agent.py:                        _log.debug("Not start of cycle. Check convergence for neighbor {}.".format(n.model.name))
new_campus_agent.py:                            _log.debug("NeighborModel {} sent records.".format(n.model.name))
new_campus_agent.py:                            _log.debug("{} ({}) did not send records due to check_for_convergence()."
new_campus_agent.py:                            _log.debug("{} reschedule to run at {}".format(self.name, next_run_dt))
new_campus_agent.py:            _log.debug("Market balancing sub-problem failed.")
new_campus_agent.py:        _log.debug("{} has minPower of {} and maxPower of {}".format(bldg.name,
new_campus_agent.py:        _log.exception('unhandled exception')
new_city_agent.py:# utils.setup_logging()
new_city_agent.py:_log = logging.getLogger(__name__)
new_city_agent.py:                _log.debug("{} did not run onstart because it's too late. Wait for next hour.".format(self.name))
new_city_agent.py:        _log.debug("{} schedule to run at exp_time: {} analysis_time: {}".format(self.name,
new_city_agent.py:        _log.debug("At {}, {} receives new demand records: {}".format(Timer.get_cur_time(), self.name, message))
new_city_agent.py:                _log.debug("NeighborModel {} sends records to campus.".format(self.campus.name))
new_city_agent.py:                    _log.debug("{} ({}) did not send records due to check_for_convergence()".format(self.name, dt))
new_city_agent.py:                        _log.debug("{} reschedule to run at {}".format(self.name, next_run_dt))
new_city_agent.py:            _log.debug("Market balancing sub-problem failed.")
new_city_agent.py:        _log.exception('unhandled exception')
openloop_pnnl_load_predictor.py:utils.setup_logging()
openloop_pnnl_load_predictor.py:_log = logging.getLogger(__name__)
openloop_pnnl_load_predictor.py:        _log.debug("openloop_pnnl_load_predictor: Market: {} time_intervals len: {}".format(mkt.name,
openloop_pnnl_load_predictor.py:        _log.debug("Market: {} schedule_power {}".format(mkt.name, self.scheduledPowers))
openloop_pnnl_load_predictor.py:            _log.debug("schedule_power Market {}, time interval: {}, power value: {} ".format(power.market.name,
openloop_richland_load_predictor.py:utils.setup_logging()
openloop_richland_load_predictor.py:_log = logging.getLogger(__name__)
openloop_richland_load_predictor.py:            # _log.warning('- the method had errors when called')
openloop_richland_load_predictor.py:            # _log.warning('- the calculated powers were not as expected')
solar_pv_resource_model.py:utils.setup_logging()
solar_pv_resource_model.py:_log = logging.getLogger(__name__)
solar_pv_resource_model.py:        #_log.debug("solar_pv_resource_model: Market: {} time_intervals len: {}".format(market.name,
solar_pv_resource_model.py:        _log.debug("Market: {} schedule_power {}".format(market.name, self.scheduledPowers))
solar_pv_resource_model.py:            _log.debug("schedule_power Market {}, time interval: {}, power value: {} ".format(power.market.name,
tcc_model.py:utils.setup_logging()
tcc_model.py:_log = logging.getLogger(__name__)
tcc_model.py:        _log.info("TCC set_tcc_curves are: q: {}, p: {}, c: {}".format(len(self.quantities),
tcc_model.py:        _log.info("TCC set_tcc_curves actual demand curves: c: {}".format(self.tcc_curves))
tcc_model.py:    #     _log.debug("TCC tcc_model schedule_power()")
tcc_model.py:    #         _log.debug("TCC tcc_model default_power: {}".format(value))
tcc_model.py:    #     _log.debug("TCC scheduledPowers are: {}".format(sp))
tcc_model.py:        _log.info("Market TCC tcc_model schedule_power()")
tcc_model.py:            _log.info("Market in {} state..Starting building level mix market ".format(mkt.marketState))
tcc_model.py:        _log.info("Market {} TCC tcc_model set_scheduled_power()".format(self.name))
tcc_model.py:            _log.debug("Market {} TCC tcc_curves is not None, calling update_vertices".format(mkt.name))
tcc_model.py:            #_log.debug("Market TCC tcc_model default_power: {}".format(value))
tcc_model.py:        #_log.debug("Market TCC scheduledPowers length 1: {}".format(len(self.scheduledPowers)))
tcc_model.py:        #_log.debug("Market TCC scheduledPowers length 2: {}".format(len(self.scheduledPowers)))
tcc_model.py:        _log.debug("Market TCC scheduledPowers are: {}, length: {}".format(sp, len(sp)))
tcc_model.py:            #_log.debug("At {}, Tcc market has {} intervals".format(Timer.get_cur_time(),
tcc_model.py:                    _log.debug("TCC model e: {}, i: {}".format(e, i))
tcc_model.py:        _log.debug("TCC active vertices are: {}".format(av))
temperature_forecast_model.py:utils.setup_logging()
temperature_forecast_model.py:_log = logging.getLogger(__name__)
temperature_forecast_model.py:utils.setup_logging()
temperature_forecast_model.py:            _log.warning("Problem automatically determining timezone! - Default to UTC.")
temperature_forecast_model.py:               _log.warning("Weather service is not running!")
temperature_forecast_model.py:            _log.warning("RPC call to {} failed for weather forecast: {}".format(self.weather_vip, ex))
temperature_forecast_model.py:        _log.info("get_forecast_file: {}".format(mkt.timeIntervals))
time_interval.py:utils.setup_logging()
time_interval.py:_log = logging.getLogger(__name__)
time_interval.py:#            _log.log(logging.ERROR, 'Invalid TimeInterval market state: TimeInterval ' + self.name)
transactive_record.py:utils.setup_logging()
transactive_record.py:_log = logging.getLogger(__name__)
transactive_record.py:            #_log.debug("TransactiveRecord time_interval is instance of TimeInterval")
transactive_record.py:            #_log.debug("TransactiveRecord time_interval is not instance of TimeInterval")
transactive_record.py:        #_log.debug("TransactiveRecord time_interval is {}".format(self.timeInterval))
transactive_record.py:        _log.debug("TransactiveRecord timeStamp is {}".format(self.timeStamp))
